<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thirdweb</name>
    </assembly>
    <members>
        <member name="T:Thirdweb.ITimeoutOptions">
            <summary>
            Interface for defining timeout options for different types of operations.
            </summary>
        </member>
        <member name="M:Thirdweb.ITimeoutOptions.GetTimeout(Thirdweb.TimeoutType,System.Int32)">
            <summary>
            Gets the timeout value for the specified operation type.
            </summary>
            <param name="type">The type of operation.</param>
            <param name="fallback">The fallback timeout value if none is specified.</param>
            <returns>The timeout value for the specified operation type.</returns>
        </member>
        <member name="T:Thirdweb.ThirdwebClient">
            <summary>
            Represents a client for interacting with the Thirdweb API.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebClient.HttpClient">
            <summary>
            Gets the HTTP client used by the Thirdweb client.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebClient.ClientId">
            <summary>
            Gets the client ID.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebClient.Create(System.String,System.String,System.String,Thirdweb.ITimeoutOptions,Thirdweb.IThirdwebHttpClient,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new instance of <see cref="T:Thirdweb.ThirdwebClient"/>.
            </summary>
            <param name="clientId">The client ID (optional).</param>
            <param name="secretKey">The secret key (optional).</param>
            <param name="bundleId">The bundle ID (optional).</param>
            <param name="fetchTimeoutOptions">The fetch timeout options (optional).</param>
            <param name="httpClient">The HTTP client (optional).</param>
            <param name="headers">The headers to set on the HTTP client (optional).</param>
            <returns>A new instance of <see cref="T:Thirdweb.ThirdwebClient"/>.</returns>
        </member>
        <member name="T:Thirdweb.TimeoutOptions">
            <summary>
            Represents the timeout options for different types of operations.
            </summary>
        </member>
        <member name="M:Thirdweb.TimeoutOptions.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.TimeoutOptions"/> class.
            </summary>
            <param name="storage">The timeout for storage operations (optional).</param>
            <param name="rpc">The timeout for RPC operations (optional).</param>
            <param name="other">The timeout for other operations (optional).</param>
        </member>
        <member name="M:Thirdweb.TimeoutOptions.GetTimeout(Thirdweb.TimeoutType,System.Int32)">
            <summary>
            Gets the timeout value for the specified operation type.
            </summary>
            <param name="type">The type of operation.</param>
            <param name="fallback">The fallback timeout value if none is specified (default is <see cref="F:Thirdweb.Constants.DEFAULT_FETCH_TIMEOUT"/>).</param>
            <returns>The timeout value for the specified operation type.</returns>
        </member>
        <member name="T:Thirdweb.TimeoutType">
            <summary>
            Specifies the type of timeout for various operations.
            </summary>
        </member>
        <member name="F:Thirdweb.TimeoutType.Storage">
            <summary>
            Timeout for storage operations.
            </summary>
        </member>
        <member name="F:Thirdweb.TimeoutType.Rpc">
            <summary>
            Timeout for RPC operations.
            </summary>
        </member>
        <member name="F:Thirdweb.TimeoutType.Other">
            <summary>
            Timeout for other types of operations.
            </summary>
        </member>
        <member name="T:Thirdweb.ThirdwebContract">
            <summary>
            Represents a Thirdweb contract.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebContract.Create(Thirdweb.ThirdwebClient,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Thirdweb.ThirdwebContract"/>.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="address">The contract address.</param>
            <param name="chain">The chain ID.</param>
            <param name="abi">The contract ABI (optional).</param>
            <returns>A new instance of <see cref="T:Thirdweb.ThirdwebContract"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if any of the required parameters are missing.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebContract.FetchAbi(Thirdweb.ThirdwebClient,System.String,System.Numerics.BigInteger)">
            <summary>
            Fetches the ABI for the specified contract.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="address">The contract address.</param>
            <param name="chainId">The chain ID.</param>
            <returns>The contract ABI.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebContract.Read``1(Thirdweb.ThirdwebContract,System.String,System.Object[])">
            <summary>
            Reads data from the contract using the specified method.
            </summary>
            <typeparam name="T">The type of the return value.</typeparam>
            <param name="contract">The contract instance.</param>
            <param name="method">The method to call.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>The result of the method call.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebContract.Prepare(Thirdweb.IThirdwebWallet,Thirdweb.ThirdwebContract,System.String,System.Numerics.BigInteger,System.Object[])">
            <summary>
            Prepares a transaction for the specified method and parameters.
            </summary>
            <param name="wallet">The wallet instance.</param>
            <param name="contract">The contract instance.</param>
            <param name="method">The method to call.</param>
            <param name="weiValue">The value in wei to send.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A prepared transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebContract.Write(Thirdweb.IThirdwebWallet,Thirdweb.ThirdwebContract,System.String,System.Numerics.BigInteger,System.Object[])">
            <summary>
            Writes data to the contract using the specified method and parameters.
            </summary>
            <param name="wallet">The wallet instance.</param>
            <param name="contract">The contract instance.</param>
            <param name="method">The method to call.</param>
            <param name="weiValue">The value in wei to send.</param>
            <param name="parameters">The parameters for the method.</param>
            <returns>A transaction receipt.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebContract.GetFunctionMatchSignature(Nethereum.Contracts.Contract,System.String,System.Object[])">
            <summary>
            Gets a function matching the specified signature from the contract.
            </summary>
            <param name="contract">The contract instance.</param>
            <param name="functionName">The name of the function.</param>
            <param name="args">The arguments for the function.</param>
            <returns>The matching function, or null if no match is found.</returns>
        </member>
        <member name="T:Thirdweb.VerifyResult">
            <summary>
            Represents the result of a verification operation.
            </summary>
        </member>
        <member name="P:Thirdweb.VerifyResult.IsValid">
            <summary>
            Gets or sets a value indicating whether the verification is valid.
            </summary>
        </member>
        <member name="P:Thirdweb.VerifyResult.Signer">
            <summary>
            Gets or sets the address of the signer.
            </summary>
        </member>
        <member name="T:Thirdweb.RoyaltyInfoResult">
            <summary>
            Represents the royalty information result.
            </summary>
        </member>
        <member name="P:Thirdweb.RoyaltyInfoResult.Recipient">
            <summary>
            Gets or sets the recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.RoyaltyInfoResult.Bps">
            <summary>
            Gets or sets the basis points (bps) for royalty.
            </summary>
        </member>
        <member name="T:Thirdweb.ContractMetadata">
            <summary>
            Represents the metadata of a contract.
            </summary>
        </member>
        <member name="P:Thirdweb.ContractMetadata.Name">
            <summary>
            Gets or sets the name of the contract.
            </summary>
        </member>
        <member name="P:Thirdweb.ContractMetadata.Symbol">
            <summary>
            Gets or sets the symbol of the contract.
            </summary>
        </member>
        <member name="P:Thirdweb.ContractMetadata.Description">
            <summary>
            Gets or sets the description of the contract.
            </summary>
        </member>
        <member name="P:Thirdweb.ContractMetadata.Image">
            <summary>
            Gets or sets the image URL of the contract.
            </summary>
        </member>
        <member name="T:Thirdweb.Forwarder_ForwardRequest">
            <summary>
            Represents a forward request for a forwarder.
            </summary>
        </member>
        <member name="P:Thirdweb.Forwarder_ForwardRequest.From">
            <summary>
            Gets or sets the address of the sender.
            </summary>
        </member>
        <member name="P:Thirdweb.Forwarder_ForwardRequest.To">
            <summary>
            Gets or sets the address of the recipient.
            </summary>
        </member>
        <member name="P:Thirdweb.Forwarder_ForwardRequest.Value">
            <summary>
            Gets or sets the value to be transferred.
            </summary>
        </member>
        <member name="P:Thirdweb.Forwarder_ForwardRequest.Gas">
            <summary>
            Gets or sets the gas limit for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Forwarder_ForwardRequest.Nonce">
            <summary>
            Gets or sets the nonce for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Forwarder_ForwardRequest.Data">
            <summary>
            Gets or sets the data to be sent with the transaction.
            </summary>
        </member>
        <member name="T:Thirdweb.NFTType">
            <summary>
            Represents the type of an NFT.
            </summary>
        </member>
        <member name="T:Thirdweb.NFT">
            <summary>
            Represents an NFT with metadata, owner, type, and supply information.
            </summary>
        </member>
        <member name="P:Thirdweb.NFT.Metadata">
            <summary>
            Gets or sets the metadata of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFT.Owner">
            <summary>
            Gets or sets the owner address of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFT.Type">
            <summary>
            Gets or sets the type of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFT.Supply">
            <summary>
            Gets or sets the supply of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFT.QuantityOwned">
            <summary>
            Gets or sets the quantity owned by the user.
            </summary>
        </member>
        <member name="T:Thirdweb.NFTMetadata">
            <summary>
            Represents the metadata of an NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.Id">
            <summary>
            Gets or sets the ID of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.Uri">
            <summary>
            Gets or sets the URI of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.Description">
            <summary>
            Gets or sets the description of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.Image">
            <summary>
            Gets or sets the image URL of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.Name">
            <summary>
            Gets or sets the name of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.AnimationUrl">
            <summary>
            Gets or sets the animation URL of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.ExternalUrl">
            <summary>
            Gets or sets the external URL of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.BackgroundColor">
            <summary>
            Gets or sets the background color of the NFT.
            </summary>
        </member>
        <member name="P:Thirdweb.NFTMetadata.Attributes">
            <summary>
            Gets or sets the attributes of the NFT.
            </summary>
        </member>
        <member name="T:Thirdweb.Drop_ClaimCondition">
            <summary>
            Represents a claim condition for a drop.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.StartTimestamp">
            <summary>
            Gets or sets the start timestamp of the claim condition.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.MaxClaimableSupply">
            <summary>
            Gets or sets the maximum claimable supply.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.SupplyClaimed">
            <summary>
            Gets or sets the supply claimed so far.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.QuantityLimitPerWallet">
            <summary>
            Gets or sets the quantity limit per wallet.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.MerkleRoot">
            <summary>
            Gets or sets the Merkle root for the claim condition.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.PricePerToken">
            <summary>
            Gets or sets the price per token for the claim condition.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.Currency">
            <summary>
            Gets or sets the currency address for the claim condition.
            </summary>
        </member>
        <member name="P:Thirdweb.Drop_ClaimCondition.Metadata">
            <summary>
            Gets or sets the metadata for the claim condition.
            </summary>
        </member>
        <member name="T:Thirdweb.TokenERC20_MintRequest">
            <summary>
            Represents a mint request for an ERC20 token.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.To">
            <summary>
            Gets or sets the address to mint the tokens to.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.PrimarySaleRecipient">
            <summary>
            Gets or sets the primary sale recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.Quantity">
            <summary>
            Gets or sets the quantity of tokens to mint.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.Price">
            <summary>
            Gets or sets the price of the tokens.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.Currency">
            <summary>
            Gets or sets the currency address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.ValidityStartTimestamp">
            <summary>
            Gets or sets the validity start timestamp.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.ValidityEndTimestamp">
            <summary>
            Gets or sets the validity end timestamp.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC20_MintRequest.Uid">
            <summary>
            Gets or sets the unique identifier for the mint request.
            </summary>
        </member>
        <member name="T:Thirdweb.TokenERC721_MintRequest">
            <summary>
            Represents a mint request for an ERC721 token.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.To">
            <summary>
            Gets or sets the address to mint the token to.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.RoyaltyRecipient">
            <summary>
            Gets or sets the royalty recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.RoyaltyBps">
            <summary>
            Gets or sets the royalty basis points.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.PrimarySaleRecipient">
            <summary>
            Gets or sets the primary sale recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.Uri">
            <summary>
            Gets or sets the URI of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.Price">
            <summary>
            Gets or sets the price of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.Currency">
            <summary>
            Gets or sets the currency address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.ValidityStartTimestamp">
            <summary>
            Gets or sets the validity start timestamp.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.ValidityEndTimestamp">
            <summary>
            Gets or sets the validity end timestamp.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC721_MintRequest.Uid">
            <summary>
            Gets or sets the unique identifier for the mint request.
            </summary>
        </member>
        <member name="T:Thirdweb.TokenERC1155_MintRequest">
            <summary>
            Represents a mint request for an ERC1155 token.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.To">
            <summary>
            Gets or sets the address to mint the token to.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.RoyaltyRecipient">
            <summary>
            Gets or sets the royalty recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.RoyaltyBps">
            <summary>
            Gets or sets the royalty basis points.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.PrimarySaleRecipient">
            <summary>
            Gets or sets the primary sale recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.TokenId">
            <summary>
            Gets or sets the token ID.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.Uri">
            <summary>
            Gets or sets the URI of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.Quantity">
            <summary>
            Gets or sets the quantity of tokens to mint.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.PricePerToken">
            <summary>
            Gets or sets the price per token.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.Currency">
            <summary>
            Gets or sets the currency address.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.ValidityStartTimestamp">
            <summary>
            Gets or sets the validity start timestamp.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.ValidityEndTimestamp">
            <summary>
            Gets or sets the validity end timestamp.
            </summary>
        </member>
        <member name="P:Thirdweb.TokenERC1155_MintRequest.Uid">
            <summary>
            Gets or sets the unique identifier for the mint request.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.GetMetadata(Thirdweb.ThirdwebContract)">
            <summary>
            Retrieves the metadata of the specified contract.
            </summary>
            <param name="contract">The contract to retrieve metadata for.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the contract metadata.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.GetNFTImageBytes(Thirdweb.NFT,Thirdweb.ThirdwebClient)">
            <summary>
            Retrieves the image bytes of the specified NFT.
            </summary>
            <param name="nft">The NFT to retrieve the image bytes for.</param>
            <param name="client">The client used to download the image bytes.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the image bytes.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the client is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.GetDefaultRoyaltyInfo(Thirdweb.ThirdwebContract)">
            <summary>
            Retrieves the default royalty information of the specified contract.
            </summary>
            <param name="contract">The contract to retrieve the default royalty information for.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the royalty information.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.GetPrimarySaleRecipient(Thirdweb.ThirdwebContract)">
            <summary>
            Retrieves the primary sale recipient address of the specified contract.
            </summary>
            <param name="contract">The contract to retrieve the primary sale recipient address for.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the primary sale recipient address.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.GetBalanceRaw(Thirdweb.ThirdwebClient,System.Numerics.BigInteger,System.String,System.String)">
            <summary>
            Retrieves the balance of the specified address on the specified chain.
            </summary>
            <param name="client">The client used to retrieve the balance.</param>
            <param name="chainId">The chain ID to retrieve the balance from.</param>
            <param name="address">The address to retrieve the balance for.</param>
            <param name="erc20ContractAddress">The optional ERC20 contract address to retrieve the balance from.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the balance in Wei.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the client is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the chain ID is less than or equal to 0.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.GetBalance(Thirdweb.ThirdwebContract,System.String)">
            <summary>
            Retrieves the balance of the specified contract.
            </summary>
            <param name="contract">The contract to retrieve the balance for.</param>
            <param name="erc20ContractAddress">The optional ERC20 contract address to retrieve the balance from.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the balance in Wei.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.GetBalance(Thirdweb.IThirdwebWallet,System.Numerics.BigInteger,System.String)">
            <summary>
            Retrieves the balance of the specified wallet on the specified chain.
            </summary>
            <param name="wallet">The wallet to retrieve the balance for.</param>
            <param name="chainId">The chain ID to retrieve the balance from.</param>
            <param name="erc20ContractAddress">The optional ERC20 contract address to retrieve the balance from.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the balance in Wei.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the wallet is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the chain ID is less than or equal to 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.Transfer(Thirdweb.IThirdwebWallet,System.Numerics.BigInteger,System.String,System.Numerics.BigInteger)">
            <summary>
            Transfers the specified amount of Wei to the specified address.
            </summary>
            <param name="wallet">The wallet to transfer from.</param>
            <param name="chainId">The chain ID to transfer on.</param>
            <param name="toAddress">The address to transfer to.</param>
            <param name="weiAmount">The amount of Wei to transfer.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the transaction receipt.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the wallet is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the chain ID is less than or equal to 0.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the recipient address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_BalanceOf(Thirdweb.ThirdwebContract,System.String)">
            <summary>
            Check the balance of a specific address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddress">The address of the owner whose balance is to be checked.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the balance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_TotalSupply(Thirdweb.ThirdwebContract)">
            <summary>
            Get the total supply of the token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the total supply.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_Decimals(Thirdweb.ThirdwebContract)">
            <summary>
            Get the number of decimals used by the token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with an int result containing the number of decimals.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_Symbol(Thirdweb.ThirdwebContract)">
            <summary>
            Get the symbol of the token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the symbol.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_Name(Thirdweb.ThirdwebContract)">
            <summary>
            Get the name of the token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_Allowance(Thirdweb.ThirdwebContract,System.String,System.String)">
            <summary>
            Get the allowance of a spender for a specific owner.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddress">The address of the owner.</param>
            <param name="spenderAddress">The address of the spender.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the allowance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address or spender address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_Approve(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger)">
            <summary>
            Approve a spender to spend a specific amount of tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="spenderAddress">The address of the spender.</param>
            <param name="amount">The amount of tokens to approve.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the spender address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_Transfer(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger)">
            <summary>
            Transfer tokens to a specific address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="toAddress">The address of the recipient.</param>
            <param name="amount">The amount of tokens to transfer.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the recipient address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC20_TransferFrom(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.String,System.Numerics.BigInteger)">
            <summary>
            Transfer tokens from one address to another.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="fromAddress">The address of the sender.</param>
            <param name="toAddress">The address of the recipient.</param>
            <param name="amount">The amount of tokens to transfer.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the sender address or recipient address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_TotalSupply(Thirdweb.ThirdwebContract)">
            <summary>
            Get the total supply of the token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the total supply.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_TokenOfOwnerByIndex(Thirdweb.ThirdwebContract,System.String,System.Numerics.BigInteger)">
            <summary>
            Get the token ID of a specific owner by index.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddress">The address of the owner.</param>
            <param name="index">The index of the token.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the token ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_TokenByIndex(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the token ID of a specific token by index.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="index">The index of the token.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the token ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_BalanceOf(Thirdweb.ThirdwebContract,System.String)">
            <summary>
            Check the balance of a specific address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddress">The address of the owner whose balance is to be checked.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the balance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_OwnerOf(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the owner of a specific token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the owner's address.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_Name(Thirdweb.ThirdwebContract)">
            <summary>
            Get the name of the token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the name.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_Symbol(Thirdweb.ThirdwebContract)">
            <summary>
            Get the symbol of the token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the symbol.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_TokenURI(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the URI of a specific token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the token URI.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_Approve(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger)">
            <summary>
            Approve a specific address to transfer a specific token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="toAddress">The address of the recipient.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the recipient address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_GetApproved(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the approved address for a specific token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the approved address.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_IsApprovedForAll(Thirdweb.ThirdwebContract,System.String,System.String)">
            <summary>
            Check if an address is an operator for another address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddress">The address of the owner.</param>
            <param name="operatorAddress">The address of the operator.</param>
            <returns>A task representing the asynchronous operation, with a boolean result indicating if the operator is approved for the owner.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address or operator address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_SetApprovalForAll(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Boolean)">
            <summary>
            Set or unset an operator for an owner.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="operatorAddress">The address of the operator.</param>
            <param name="approved">A boolean indicating whether to set or unset the operator.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the operator address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_TransferFrom(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.String,System.Numerics.BigInteger)">
            <summary>
            Transfer a specific token from one address to another.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="fromAddress">The address of the sender.</param>
            <param name="toAddress">The address of the recipient.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the sender address or recipient address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_SafeTransferFrom(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.String,System.Numerics.BigInteger)">
            <summary>
            Safely transfer a specific token from one address to another.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="fromAddress">The address of the sender.</param>
            <param name="toAddress">The address of the recipient.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the sender address or recipient address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_BalanceOf(Thirdweb.ThirdwebContract,System.String,System.Numerics.BigInteger)">
            <summary>
            Check the balance of a specific token for a specific address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddress">The address of the owner whose balance is to be checked.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the balance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_BalanceOfBatch(Thirdweb.ThirdwebContract,System.String[],System.Numerics.BigInteger[])">
            <summary>
            Check the balance of multiple tokens for multiple addresses.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddresses">The array of owner addresses.</param>
            <param name="tokenIds">The array of token IDs.</param>
            <returns>A task representing the asynchronous operation, with a list of BigInteger results containing the balances.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner addresses or token IDs are null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_SetApprovalForAll(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Boolean)">
            <summary>
            Approve a specific address to transfer specific tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="operatorAddress">The address of the operator.</param>
            <param name="approved">A boolean indicating whether to approve or revoke approval.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the operator address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_IsApprovedForAll(Thirdweb.ThirdwebContract,System.String,System.String)">
            <summary>
            Check if an address is approved to transfer specific tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="ownerAddress">The address of the owner.</param>
            <param name="operatorAddress">The address of the operator.</param>
            <returns>A task representing the asynchronous operation, with a boolean result indicating if the operator is approved for the owner.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address or operator address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_SafeTransferFrom(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.String,System.Numerics.BigInteger,System.Numerics.BigInteger,System.Byte[])">
            <summary>
            Transfer specific tokens from one address to another.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="fromAddress">The address of the sender.</param>
            <param name="toAddress">The address of the recipient.</param>
            <param name="tokenId">The ID of the token.</param>
            <param name="amount">The amount of tokens to transfer.</param>
            <param name="data">Additional data with no specified format.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the sender address or recipient address is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_SafeBatchTransferFrom(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.String,System.Numerics.BigInteger[],System.Numerics.BigInteger[],System.Byte[])">
            <summary>
            Transfer multiple tokens from one address to another.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="fromAddress">The address of the sender.</param>
            <param name="toAddress">The address of the recipient.</param>
            <param name="tokenIds">The array of token IDs to transfer.</param>
            <param name="amounts">The array of amounts for each token ID.</param>
            <param name="data">Additional data with no specified format.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the sender address, recipient address, token IDs, or amounts are null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_URI(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the URI for a specific token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a string result containing the URI.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_TotalSupply(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the total supply of a specific token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the total supply.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_TotalSupply(Thirdweb.ThirdwebContract)">
            <summary>
            Get the total supply of tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the total supply.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_GetNFT(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the details of a specific ERC721 token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with an NFT result containing the token details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_GetAllNFTs(Thirdweb.ThirdwebContract,System.Nullable{System.Numerics.BigInteger},System.Nullable{System.Numerics.BigInteger})">
            <summary>
            Get a list of all ERC721 tokens within a specified range.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="startTokenIdIncluded">The starting token ID (inclusive). Defaults to 0 if not specified.</param>
            <param name="endTokenIdExcluded">The ending token ID (exclusive). Defaults to the total supply if not specified.</param>
            <returns>A task representing the asynchronous operation, with a list of NFT results containing the token details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC721_GetOwnedNFTs(Thirdweb.ThirdwebContract,System.String)">
            <summary>
            Get a list of ERC721 tokens owned by a specific address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="owner">The address of the owner.</param>
            <returns>A task representing the asynchronous operation, with a list of NFT results containing the token details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_GetNFT(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the details of a specific ERC1155 token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with an NFT result containing the token details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_GetAllNFTs(Thirdweb.ThirdwebContract,System.Nullable{System.Numerics.BigInteger},System.Nullable{System.Numerics.BigInteger})">
            <summary>
            Get a list of all ERC1155 tokens within a specified range.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="startTokenIdIncluded">The starting token ID (inclusive). Defaults to 0 if not specified.</param>
            <param name="endTokenIdExcluded">The ending token ID (exclusive). Defaults to the total supply if not specified.</param>
            <returns>A task representing the asynchronous operation, with a list of NFT results containing the token details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.ERC1155_GetOwnedNFTs(Thirdweb.ThirdwebContract,System.String)">
            <summary>
            Get a list of ERC1155 tokens owned by a specific address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="owner">The address of the owner.</param>
            <returns>A task representing the asynchronous operation, with a list of NFT results containing the token details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the owner address is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC20_Claim(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.String)">
            <summary>
            Claim a specific amount of ERC20 tokens for a receiver.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="amount">The amount of tokens to claim.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address or amount is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC20_GetActiveClaimConditionId(Thirdweb.ThirdwebContract)">
            <summary>
            Get the active claim condition ID for the ERC20 drop.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the active claim condition ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC20_GetClaimConditionById(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the claim condition details for a specific claim condition ID.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="claimConditionId">The ID of the claim condition.</param>
            <returns>A task representing the asynchronous operation, with a Drop_ClaimCondition result containing the claim condition details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the claim condition ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC20_GetActiveClaimCondition(Thirdweb.ThirdwebContract)">
            <summary>
            Get the details of the active claim condition for the ERC20 drop.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a Drop_ClaimCondition result containing the active claim condition details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC721_Claim(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger)">
            <summary>
            Claim a specific quantity of ERC721 tokens for a receiver.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="quantity">The quantity of tokens to claim.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the quantity is less than or equal to 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC721_GetActiveClaimConditionId(Thirdweb.ThirdwebContract)">
            <summary>
            Get the active claim condition ID for the ERC721 drop.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the active claim condition ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC721_GetClaimConditionById(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the claim condition details for a specific claim condition ID.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="claimConditionId">The ID of the claim condition.</param>
            <returns>A task representing the asynchronous operation, with a Drop_ClaimCondition result containing the claim condition details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the claim condition ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC721_GetActiveClaimCondition(Thirdweb.ThirdwebContract)">
            <summary>
            Get the details of the active claim condition for the ERC721 drop.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <returns>A task representing the asynchronous operation, with a Drop_ClaimCondition result containing the active claim condition details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC1155_Claim(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Claim a specific quantity of ERC1155 tokens for a receiver.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="tokenId">The ID of the token.</param>
            <param name="quantity">The quantity of tokens to claim.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0 or the quantity is less than or equal to 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC1155_GetActiveClaimConditionId(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the active claim condition ID for a specific ERC1155 token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a BigInteger result containing the active claim condition ID.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC1155_GetClaimConditionById(Thirdweb.ThirdwebContract,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Get the claim condition details for a specific claim condition ID of a specific ERC1155 token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <param name="claimConditionId">The ID of the claim condition.</param>
            <returns>A task representing the asynchronous operation, with a Drop_ClaimCondition result containing the claim condition details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID or claim condition ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.DropERC1155_GetActiveClaimCondition(Thirdweb.ThirdwebContract,System.Numerics.BigInteger)">
            <summary>
            Get the details of the active claim condition for a specific ERC1155 token.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="tokenId">The ID of the token.</param>
            <returns>A task representing the asynchronous operation, with a Drop_ClaimCondition result containing the active claim condition details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC20_MintTo(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.String)">
            <summary>
            Mint a specific amount of ERC20 tokens to a receiver address.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="amount">The amount of tokens to mint.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address or amount is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC20_MintWithSignature(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,Thirdweb.TokenERC20_MintRequest,System.String)">
            <summary>
            Mint ERC20 tokens with a signature.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="signature">The signature to authorize the minting.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract, wallet, or mint request is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the signature is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC20_GenerateMintSignature(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,Thirdweb.TokenERC20_MintRequest)">
            <summary>
            Generate a mint signature for ERC20 tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for generating the signature.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <returns>A task representing the asynchronous operation, with a tuple containing the mint request and the generated signature.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract, wallet, or mint request is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC20_VerifyMintSignature(Thirdweb.ThirdwebContract,Thirdweb.TokenERC20_MintRequest,System.String)">
            <summary>
            Verify a mint signature for ERC20 tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="signature">The signature to verify.</param>
            <returns>A task representing the asynchronous operation, with a VerifyResult result containing the verification details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or mint request is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the signature is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC721_MintTo(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Mint a specific ERC721 token to a receiver address with a given URI.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="tokenId">The ID of the token.</param>
            <param name="uri">The URI of the token metadata.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address or URI is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC721_MintTo(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger,Thirdweb.NFTMetadata)">
            <summary>
            Mint a specific ERC721 token to a receiver address with metadata.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="tokenId">The ID of the token.</param>
            <param name="metadata">The metadata of the token.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC721_MintWithSignature(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,Thirdweb.TokenERC721_MintRequest,System.String)">
            <summary>
            Mint ERC721 tokens with a signature.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="signature">The signature to authorize the minting.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract, wallet, or mint request is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the signature is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC721_GenerateMintSignature(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,Thirdweb.TokenERC721_MintRequest,System.Nullable{Thirdweb.NFTMetadata})">
            <summary>
            Generate a mint signature for ERC721 tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for generating the signature.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="metadataOverride">Optional metadata override for the token.</param>
            <returns>A task representing the asynchronous operation, with a tuple containing the mint request and the generated signature.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract, wallet, or mint request is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC721_VerifyMintSignature(Thirdweb.ThirdwebContract,Thirdweb.TokenERC721_MintRequest,System.String)">
            <summary>
            Verify a mint signature for ERC721 tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="signature">The signature to verify.</param>
            <returns>A task representing the asynchronous operation, with a VerifyResult result containing the verification details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or mint request is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the signature is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC1155_MintTo(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger,System.Numerics.BigInteger,System.String)">
            <summary>
            Mint a specific quantity of ERC1155 tokens to a receiver address with a given URI.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="tokenId">The ID of the token.</param>
            <param name="quantity">The quantity of tokens to mint.</param>
            <param name="uri">The URI of the token metadata.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract, wallet, or URI is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0 or the quantity is less than or equal to 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC1155_MintTo(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,System.String,System.Numerics.BigInteger,System.Numerics.BigInteger,Thirdweb.NFTMetadata)">
            <summary>
            Mint a specific quantity of ERC1155 tokens to a receiver address with metadata.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="receiverAddress">The address of the receiver.</param>
            <param name="tokenId">The ID of the token.</param>
            <param name="quantity">The quantity of tokens to mint.</param>
            <param name="metadata">The metadata of the token.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or wallet is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the receiver address is null or empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the token ID is less than 0 or the quantity is less than or equal to 0.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC1155_MintWithSignature(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,Thirdweb.TokenERC1155_MintRequest,System.String)">
            <summary>
            Mint ERC1155 tokens with a signature.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="signature">The signature to authorize the minting.</param>
            <returns>A task representing the asynchronous operation, with a ThirdwebTransactionReceipt result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract, wallet, or mint request is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the signature is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC1155_GenerateMintSignature(Thirdweb.ThirdwebContract,Thirdweb.IThirdwebWallet,Thirdweb.TokenERC1155_MintRequest,System.Nullable{Thirdweb.NFTMetadata})">
            <summary>
            Generate a mint signature for ERC1155 tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="wallet">The wallet to use for generating the signature.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="metadataOverride">Optional metadata override for the token.</param>
            <returns>A task representing the asynchronous operation, with a tuple containing the mint request and the generated signature.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract, wallet, or mint request is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the MintRequest URI or NFTMetadata override is not provided.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebExtensions.TokenERC1155_VerifyMintSignature(Thirdweb.ThirdwebContract,Thirdweb.TokenERC1155_MintRequest,System.String)">
            <summary>
            Verify a mint signature for ERC1155 tokens.
            </summary>
            <param name="contract">The contract to interact with.</param>
            <param name="mintRequest">The mint request containing the minting details.</param>
            <param name="signature">The signature to verify.</param>
            <returns>A task representing the asynchronous operation, with a VerifyResult result containing the verification details.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the contract or mint request is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the signature is null or empty.</exception>
        </member>
        <member name="T:Thirdweb.IThirdwebHttpClient">
            <summary>
            Interface for a HTTP client used in the Thirdweb SDK.
            </summary>
        </member>
        <member name="P:Thirdweb.IThirdwebHttpClient.Headers">
            <summary>
            Gets the headers for the HTTP client.
            </summary>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.SetHeaders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the headers for the HTTP client.
            </summary>
            <param name="headers">The headers to set.</param>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.ClearHeaders">
            <summary>
            Clears all headers from the HTTP client.
            </summary>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.AddHeader(System.String,System.String)">
            <summary>
            Adds a header to the HTTP client.
            </summary>
            <param name="key">The header key.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.RemoveHeader(System.String)">
            <summary>
            Removes a header from the HTTP client.
            </summary>
            <param name="key">The header key.</param>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a GET request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Sends a POST request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="content">The HTTP content to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Sends a PUT request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="content">The HTTP content to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebHttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a DELETE request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="T:Thirdweb.ThirdwebHttpClient">
            <summary>
            Represents a HTTP client for the Thirdweb SDK.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebHttpClient.Headers">
            <summary>
            Gets the headers for the HTTP client.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.ThirdwebHttpClient"/> class.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.SetHeaders(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the headers for the HTTP client.
            </summary>
            <param name="headers">The headers to set.</param>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.ClearHeaders">
            <summary>
            Clears all headers from the HTTP client.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.AddHeader(System.String,System.String)">
            <summary>
            Adds a header to the HTTP client.
            </summary>
            <param name="key">The header key.</param>
            <param name="value">The header value.</param>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.RemoveHeader(System.String)">
            <summary>
            Removes a header from the HTTP client.
            </summary>
            <param name="key">The header key.</param>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a GET request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Sends a POST request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="content">The HTTP content to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
            <summary>
            Sends a PUT request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="content">The HTTP content to send.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a DELETE request to the specified URI.
            </summary>
            <param name="requestUri">The request URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the HTTP response message.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.Dispose(System.Boolean)">
            <summary>
            Disposes the HTTP client.
            </summary>
            <param name="disposing">Whether the client is being disposed.</param>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpClient.Dispose">
            <summary>
            Disposes the HTTP client.
            </summary>
        </member>
        <member name="T:Thirdweb.ThirdwebHttpContent">
            <summary>
            Represents HTTP content used in the Thirdweb SDK.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpContent.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.ThirdwebHttpContent"/> class from a string.
            </summary>
            <param name="content">The content string.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the content is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpContent.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.ThirdwebHttpContent"/> class from a byte array.
            </summary>
            <param name="content">The content byte array.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the content is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpContent.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.ThirdwebHttpContent"/> class from a stream.
            </summary>
            <param name="content">The content stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the content is null.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpContent.ReadAsStringAsync">
            <summary>
            Reads the content as a string.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the content string.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpContent.ReadAsByteArrayAsync">
            <summary>
            Reads the content as a byte array.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the content byte array.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpContent.ReadAsStreamAsync">
            <summary>
            Reads the content as a stream.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the content stream.</returns>
        </member>
        <member name="T:Thirdweb.ThirdwebHttpResponseMessage">
            <summary>
            Represents an HTTP response message used in the Thirdweb SDK.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebHttpResponseMessage.StatusCode">
            <summary>
            Gets or sets the status code of the HTTP response.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebHttpResponseMessage.Content">
            <summary>
            Gets or sets the content of the HTTP response.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebHttpResponseMessage.IsSuccessStatusCode">
            <summary>
            Gets or sets a value indicating whether the HTTP response is successful.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpResponseMessage.#ctor(System.Int64,Thirdweb.ThirdwebHttpContent,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.ThirdwebHttpResponseMessage"/> class.
            </summary>
            <param name="statusCode">The status code of the HTTP response.</param>
            <param name="content">The content of the HTTP response.</param>
            <param name="isSuccessStatusCode">A value indicating whether the HTTP response is successful.</param>
        </member>
        <member name="M:Thirdweb.ThirdwebHttpResponseMessage.EnsureSuccessStatusCode">
            <summary>
            Ensures that the HTTP response was successful.
            </summary>
            <returns>The <see cref="T:Thirdweb.ThirdwebHttpResponseMessage"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown if the HTTP response was not successful.</exception>
        </member>
        <member name="T:Thirdweb.Pay.ThirdwebPay">
            <summary>
            Provides methods for processing payments with cryptocurrency.
            </summary>
            <summary>
            Provides methods for processing payments with cryptocurrency and fiat.
            </summary>
            <summary>
            Provides methods for processing payments with cryptocurrency and fiat.
            </summary>
            <summary>
            Provides methods for processing payments with cryptocurrency and fiat.
            </summary>
            <summary>
            Provides methods for processing payments with cryptocurrency and fiat.
            </summary>
            <summary>
            Provides methods for processing payments with cryptocurrency and fiat.
            </summary>
            <summary>
            Provides methods for processing payments with cryptocurrency and fiat.
            </summary>
            <summary>
            Provides methods for processing payments with cryptocurrency and fiat.
            </summary>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.BuyWithCrypto(Thirdweb.IThirdwebWallet,Thirdweb.Pay.BuyWithCryptoQuoteResult)">
            <summary>
            Initiates a cryptocurrency purchase using the provided wallet and quote.
            </summary>
            <param name="wallet">The wallet to use for the purchase.</param>
            <param name="buyWithCryptoQuote">The quote result containing transaction details.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the transaction hash.</returns>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.BuyWithFiat(Thirdweb.Pay.BuyWithFiatQuoteResult)">
            <summary>
            Initiates a purchase using fiat currency through an on-ramp service.
            </summary>
            <param name="buyWithFiatQuote">The quote result containing the on-ramp link.</param>
            <returns>The on-ramp link for the fiat purchase.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the on-ramp link is null or empty.</exception>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.GetBuyHistory(Thirdweb.ThirdwebClient,System.String,System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Retrieves the buy history for a specified wallet address.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="walletAddress">The wallet address to retrieve history for.</param>
            <param name="start">The start index for the history.</param>
            <param name="count">The number of history records to retrieve.</param>
            <param name="cursor">The cursor for pagination (optional).</param>
            <param name="pageSize">The page size for pagination (optional).</param>
            <returns>A task that represents the asynchronous operation. The task result contains the buy history result.</returns>
            <exception cref="T:System.Exception">Thrown if the HTTP response is not successful.</exception>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.GetBuyWithCryptoQuote(Thirdweb.ThirdwebClient,Thirdweb.Pay.BuyWithCryptoQuoteParams)">
            <summary>
            Retrieves a quote for buying with cryptocurrency using the provided parameters.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="buyWithCryptoParams">The parameters for the crypto purchase.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the quote result.</returns>
            <exception cref="T:System.Exception">Thrown if the HTTP response is not successful.</exception>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.GetBuyWithCryptoStatus(Thirdweb.ThirdwebClient,System.String)">
            <summary>
            Retrieves the status of a cryptocurrency purchase using the transaction hash.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="transactionHash">The transaction hash to check the status of.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the status result.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the transaction hash is null or empty.</exception>
            <exception cref="T:System.Exception">Thrown if the HTTP response is not successful.</exception>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.GetBuyWithFiatCurrencies(Thirdweb.ThirdwebClient)">
            <summary>
            Retrieves the list of supported fiat currencies for buying with fiat.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the list of supported fiat currencies.</returns>
            <exception cref="T:System.Exception">Thrown if the HTTP response is not successful.</exception>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.GetBuyWithFiatQuote(Thirdweb.ThirdwebClient,Thirdweb.Pay.BuyWithFiatQuoteParams)">
            <summary>
            Retrieves a quote for buying with fiat using the provided parameters.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="buyWithFiatParams">The parameters for the fiat purchase.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the quote result.</returns>
            <exception cref="T:System.Exception">Thrown if the HTTP response is not successful.</exception>
        </member>
        <member name="M:Thirdweb.Pay.ThirdwebPay.GetBuyWithFiatStatus(Thirdweb.ThirdwebClient,System.String)">
            <summary>
            Retrieves the status of a fiat purchase using the intent ID.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="intentId">The intent ID to check the status of.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the status result.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the intent ID is null or empty.</exception>
            <exception cref="T:System.Exception">Thrown if the HTTP response is not successful.</exception>
        </member>
        <member name="T:Thirdweb.Pay.BuyHistoryResponse">
            <summary>
            Represents the response for buy history.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyHistoryResponse.Result">
            <summary>
            Gets or sets the result of the buy history.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.BuyHistoryResult">
            <summary>
            Represents the result of the buy history.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyHistoryResult.WalletAddress">
            <summary>
            Gets or sets the wallet address.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyHistoryResult.Page">
            <summary>
            Gets or sets the list of history pages.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyHistoryResult.NextCursor">
            <summary>
            Gets or sets the next cursor for pagination.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyHistoryResult.PageSize">
            <summary>
            Gets or sets the page size.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.HistoryPage">
            <summary>
            Represents a page in the buy history.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.HistoryPage.BuyWithCryptoStatus">
            <summary>
            Gets or sets the status of the buy with crypto transaction.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.HistoryPage.BuyWithFiatStatus">
            <summary>
            Gets or sets the status of the buy with fiat transaction.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.BuyWithCryptoQuoteParams">
            <summary>
            Parameters for getting a quote for buying with cryptocurrency.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.FromAddress">
            <summary>
            The address from which the payment is made.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.FromChainId">
            <summary>
            The chain ID of the source token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.FromTokenAddress">
            <summary>
            The address of the source token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.FromAmount">
            <summary>
            The amount of the source token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.FromAmountWei">
            <summary>
            The amount of the source token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.ToChainId">
            <summary>
            The chain ID of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.ToTokenAddress">
            <summary>
            The address of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.ToAmount">
            <summary>
            The amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.ToAmountWei">
            <summary>
            The amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.ToAddress">
            <summary>
            The address of the recipient.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.MaxSlippageBPS">
            <summary>
            The maximum slippage in basis points.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteParams.IntentId">
            <summary>
            The intent ID for the transaction.
            </summary>
        </member>
        <member name="M:Thirdweb.Pay.BuyWithCryptoQuoteParams.#ctor(System.String,System.Nullable{System.Numerics.BigInteger},System.String,System.String,System.String,System.String,System.Nullable{System.Numerics.BigInteger},System.String,System.String,System.String,System.Nullable{System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.Pay.BuyWithCryptoQuoteParams"/> class.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.TransactionRequest">
            <summary>
            Represents a transaction request.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionRequest.Data">
            <summary>
            Gets or sets the data of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionRequest.To">
            <summary>
            Gets or sets the recipient address of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionRequest.Value">
            <summary>
            Gets or sets the value of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionRequest.From">
            <summary>
            Gets or sets the sender address of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionRequest.ChainId">
            <summary>
            Gets or sets the chain ID of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionRequest.GasPrice">
            <summary>
            Gets or sets the gas price of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionRequest.GasLimit">
            <summary>
            Gets or sets the gas limit of the transaction.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.Approval">
            <summary>
            Represents an approval request.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Approval.ChainId">
            <summary>
            Gets or sets the chain ID of the approval request.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Approval.TokenAddress">
            <summary>
            Gets or sets the token address for the approval request.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Approval.SpenderAddress">
            <summary>
            Gets or sets the spender address for the approval request.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Approval.AmountWei">
            <summary>
            Gets or sets the amount in wei for the approval request.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.PaymentToken">
            <summary>
            Represents a payment token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.PaymentToken.Token">
            <summary>
            Gets or sets the token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.PaymentToken.AmountWei">
            <summary>
            Gets or sets the amount in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.PaymentToken.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.PaymentToken.AmountUSDCents">
            <summary>
            Gets or sets the amount in USD cents.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.ProcessingFee">
            <summary>
            Represents a processing fee.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ProcessingFee.Token">
            <summary>
            Gets or sets the token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ProcessingFee.AmountWei">
            <summary>
            Gets or sets the amount in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ProcessingFee.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ProcessingFee.AmountUSDCents">
            <summary>
            Gets or sets the amount in USD cents.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.BuyWithCryptoQuoteResult">
            <summary>
            Represents the result of a quote for buying with cryptocurrency.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.QuoteId">
            <summary>
            Gets or sets the quote ID.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.TransactionRequest">
            <summary>
            Gets or sets the transaction request.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.Approval">
            <summary>
            Gets or sets the approval details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.FromAddress">
            <summary>
            Gets or sets the address from which the payment is made.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.ToAddress">
            <summary>
            Gets or sets the recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.FromToken">
            <summary>
            Gets or sets the details of the source token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.ToToken">
            <summary>
            Gets or sets the details of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.FromAmountWei">
            <summary>
            Gets or sets the amount of the source token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.FromAmount">
            <summary>
            Gets or sets the amount of the source token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.ToAmountMinWei">
            <summary>
            Gets or sets the minimum amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.ToAmountMin">
            <summary>
            Gets or sets the minimum amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.ToAmountWei">
            <summary>
            Gets or sets the amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.ToAmount">
            <summary>
            Gets or sets the amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.PaymentTokens">
            <summary>
            Gets or sets the list of payment tokens.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.ProcessingFees">
            <summary>
            Gets or sets the list of processing fees.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.Estimated">
            <summary>
            Gets or sets the estimated details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.MaxSlippageBPS">
            <summary>
            Gets or sets the maximum slippage in basis points.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoQuoteResult.Bridge">
            <summary>
            Gets or sets the bridge details.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.GetSwapQuoteResponse">
            <summary>
            Represents the response for getting a swap quote.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.GetSwapQuoteResponse.Result">
            <summary>
            Gets or sets the result of the swap quote.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.SwapStatusResponse">
            <summary>
            Represents the response for a swap status.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapStatusResponse.Result">
            <summary>
            Gets or sets the result of the swap status.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.BuyWithCryptoStatusResult">
            <summary>
            Represents the status result of buying with cryptocurrency.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.Quote">
            <summary>
            Gets or sets the swap quote details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.SwapType">
            <summary>
            Gets or sets the type of swap.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.Source">
            <summary>
            Gets or sets the source transaction details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.Destination">
            <summary>
            Gets or sets the destination transaction details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.Status">
            <summary>
            Gets or sets the status of the swap.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.SubStatus">
            <summary>
            Gets or sets the sub-status of the swap.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.FromAddress">
            <summary>
            Gets or sets the address from which the swap is initiated.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.ToAddress">
            <summary>
            Gets or sets the recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.FailureMessage">
            <summary>
            Gets or sets the failure message if the swap fails.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithCryptoStatusResult.Bridge">
            <summary>
            Gets or sets the bridge details.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.TransactionDetails">
            <summary>
            Represents the transaction details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionDetails.TransactionHash">
            <summary>
            Gets or sets the transaction hash.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionDetails.Token">
            <summary>
            Gets or sets the token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionDetails.Amount">
            <summary>
            Gets or sets the amount of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionDetails.AmountWei">
            <summary>
            Gets or sets the amount of the token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionDetails.AmountUSDCents">
            <summary>
            Gets or sets the amount in USD cents.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionDetails.CompletedAt">
            <summary>
            Gets or sets the completion date of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.TransactionDetails.ExplorerLink">
            <summary>
            Gets or sets the explorer link for the transaction.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.SwapQuote">
            <summary>
            Represents a swap quote.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.FromToken">
            <summary>
            Gets or sets the source token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.ToToken">
            <summary>
            Gets or sets the destination token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.FromAmountWei">
            <summary>
            Gets or sets the amount of the source token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.FromAmount">
            <summary>
            Gets or sets the amount of the source token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.ToAmountWei">
            <summary>
            Gets or sets the amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.ToAmount">
            <summary>
            Gets or sets the amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.ToAmountMin">
            <summary>
            Gets or sets the minimum amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.ToAmountMinWei">
            <summary>
            Gets or sets the minimum amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.Estimated">
            <summary>
            Gets or sets the estimated details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.SwapQuote.CreatedAt">
            <summary>
            Gets or sets the creation date of the swap quote.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.SwapStatus">
            <summary>
            Represents the swap status.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapStatus.NOT_FOUND">
            <summary>
            Status when the swap is not found.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapStatus.NONE">
            <summary>
            Status when there is no swap.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapStatus.PENDING">
            <summary>
            Status when the swap is pending.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapStatus.FAILED">
            <summary>
            Status when the swap has failed.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapStatus.COMPLETED">
            <summary>
            Status when the swap is completed.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.SwapSubStatus">
            <summary>
            Represents the swap sub-status.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapSubStatus.NONE">
            <summary>
            Sub-status when there is no specific sub-status.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapSubStatus.WAITING_BRIDGE">
            <summary>
            Sub-status when waiting for the bridge.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapSubStatus.REVERTED_ON_CHAIN">
            <summary>
            Sub-status when the swap is reverted on chain.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapSubStatus.SUCCESS">
            <summary>
            Sub-status when the swap is successful.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapSubStatus.PARTIAL_SUCCESS">
            <summary>
            Sub-status when the swap is partially successful.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapSubStatus.UNKNOWN_ERROR">
            <summary>
            Sub-status when there is an unknown error.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.FiatCurrenciesResponse">
            <summary>
            Represents the response for fiat currencies.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.FiatCurrenciesResponse.Result">
            <summary>
            Gets or sets the result of the fiat currencies response.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.FiatCurrenciesResult">
            <summary>
            Represents the result containing the list of fiat currencies.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.FiatCurrenciesResult.FiatCurrencies">
            <summary>
            Gets or sets the list of fiat currencies.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.BuyWithFiatQuoteParams">
            <summary>
            Parameters for getting a quote for buying with fiat.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.FromCurrencySymbol">
            <summary>
            The symbol of the currency to be used for the purchase.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.FromAmount">
            <summary>
            The amount of the currency to be used for the purchase.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.FromAmountUnits">
            <summary>
            The units of the currency amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.ToAddress">
            <summary>
            The address to receive the purchased tokens.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.ToChainId">
            <summary>
            The chain ID of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.ToTokenAddress">
            <summary>
            The address of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.ToAmount">
            <summary>
            The amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.ToAmountWei">
            <summary>
            The amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.MaxSlippageBPS">
            <summary>
            The maximum slippage in basis points.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteParams.IsTestMode">
            <summary>
            Indicates whether the transaction is in test mode.
            </summary>
        </member>
        <member name="M:Thirdweb.Pay.BuyWithFiatQuoteParams.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.Pay.BuyWithFiatQuoteParams"/> class.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.BuyWithFiatQuoteResult">
            <summary>
            Represents the result of a quote for buying with fiat.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.IntentId">
            <summary>
            Gets or sets the intent ID of the quote.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.ToAddress">
            <summary>
            Gets or sets the recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.FromCurrency">
            <summary>
            Gets or sets the details of the source currency.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.FromCurrencyWithFees">
            <summary>
            Gets or sets the details of the source currency including fees.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.OnRampToken">
            <summary>
            Gets or sets the on-ramp token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.ToToken">
            <summary>
            Gets or sets the details of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.EstimatedToAmountMinWei">
            <summary>
            Gets or sets the estimated minimum amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.EstimatedToAmountMin">
            <summary>
            Gets or sets the estimated minimum amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.ProcessingFees">
            <summary>
            Gets or sets the list of processing fees.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.EstimatedDurationSeconds">
            <summary>
            Gets or sets the estimated duration of the transaction in seconds.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.MaxSlippageBPS">
            <summary>
            Gets or sets the maximum slippage in basis points.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatQuoteResult.OnRampLink">
            <summary>
            Gets or sets the on-ramp link for the transaction.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.OnRampToken">
            <summary>
            Represents an on-ramp token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampToken.Token">
            <summary>
            Gets or sets the token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampToken.AmountWei">
            <summary>
            Gets or sets the amount in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampToken.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampToken.AmountUSDCents">
            <summary>
            Gets or sets the amount in USD cents.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.OnRampFees">
            <summary>
            Represents on-ramp fees.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampFees.Amount">
            <summary>
            Gets or sets the fee amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampFees.AmountUnits">
            <summary>
            Gets or sets the units of the fee amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampFees.Decimals">
            <summary>
            Gets or sets the number of decimals for the fee amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampFees.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol for the fee.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampFees.FeeType">
            <summary>
            Gets or sets the type of the fee.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.GetFiatQuoteResponse">
            <summary>
            Represents the response for getting a fiat quote.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.GetFiatQuoteResponse.Result">
            <summary>
            Gets or sets the result of the fiat quote.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.OnRampStatusResponse">
            <summary>
            Represents the response for an on-ramp status.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampStatusResponse.Result">
            <summary>
            Gets or sets the result of the on-ramp status.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.BuyWithFiatStatusResult">
            <summary>
            Represents the status result of buying with fiat.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatStatusResult.IntentId">
            <summary>
            Gets or sets the intent ID of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatStatusResult.Status">
            <summary>
            Gets or sets the status of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatStatusResult.ToAddress">
            <summary>
            Gets or sets the recipient address.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatStatusResult.Quote">
            <summary>
            Gets or sets the quote details for the on-ramp transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatStatusResult.Source">
            <summary>
            Gets or sets the source transaction details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatStatusResult.Destination">
            <summary>
            Gets or sets the destination transaction details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.BuyWithFiatStatusResult.FailureMessage">
            <summary>
            Gets or sets the failure message if the transaction fails.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.OnRampQuote">
            <summary>
            Represents a quote for an on-ramp transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.CreatedAt">
            <summary>
            Gets or sets the creation date of the quote.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.EstimatedOnRampAmountWei">
            <summary>
            Gets or sets the estimated amount for the on-ramp transaction in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.EstimatedOnRampAmount">
            <summary>
            Gets or sets the estimated amount for the on-ramp transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.EstimatedToTokenAmount">
            <summary>
            Gets or sets the estimated amount of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.EstimatedToTokenAmountWei">
            <summary>
            Gets or sets the estimated amount of the destination token in wei.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.FromCurrency">
            <summary>
            Gets or sets the details of the source currency.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.FromCurrencyWithFees">
            <summary>
            Gets or sets the details of the source currency including fees.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.OnRampToken">
            <summary>
            Gets or sets the on-ramp token details.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.ToToken">
            <summary>
            Gets or sets the details of the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampQuote.EstimatedDurationSeconds">
            <summary>
            Gets or sets the estimated duration of the transaction in seconds.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.OnRampStatus">
            <summary>
            Represents the various statuses of an on-ramp transaction.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.NONE">
            <summary>
            No status.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.PENDING_PAYMENT">
            <summary>
            Payment is pending.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.PAYMENT_FAILED">
            <summary>
            Payment has failed.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.PENDING_ON_RAMP_TRANSFER">
            <summary>
            Pending on-ramp transfer.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.ON_RAMP_TRANSFER_IN_PROGRESS">
            <summary>
            On-ramp transfer is in progress.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.ON_RAMP_TRANSFER_COMPLETED">
            <summary>
            On-ramp transfer is completed.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.ON_RAMP_TRANSFER_FAILED">
            <summary>
            On-ramp transfer has failed.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.CRYPTO_SWAP_REQUIRED">
            <summary>
            Crypto swap is required.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.CRYPTO_SWAP_COMPLETED">
            <summary>
            Crypto swap is completed.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.CRYPTO_SWAP_FALLBACK">
            <summary>
            Crypto swap fallback.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.CRYPTO_SWAP_IN_PROGRESS">
            <summary>
            Crypto swap is in progress.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.OnRampStatus.CRYPTO_SWAP_FAILED">
            <summary>
            Crypto swap has failed.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.ErrorResponse">
            <summary>
            Represents the error response.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ErrorResponse.Error">
            <summary>
            Gets or sets the error details.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.ErrorDetails">
            <summary>
            Represents the details of an error.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ErrorDetails.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ErrorDetails.Reason">
            <summary>
            Gets or sets the reason for the error.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ErrorDetails.Code">
            <summary>
            Gets or sets the error code.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ErrorDetails.Stack">
            <summary>
            Gets or sets the error stack trace.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.ErrorDetails.StatusCode">
            <summary>
            Gets or sets the status code of the error.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.Token">
            <summary>
            Represents a token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Token.ChainId">
            <summary>
            Gets or sets the chain ID of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Token.TokenAddress">
            <summary>
            Gets or sets the address of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Token.Decimals">
            <summary>
            Gets or sets the number of decimals of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Token.PriceUSDCents">
            <summary>
            Gets or sets the price of the token in USD cents.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Token.Name">
            <summary>
            Gets or sets the name of the token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Token.Symbol">
            <summary>
            Gets or sets the symbol of the token.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.Estimated">
            <summary>
            Represents the estimated details for a transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Estimated.FromAmountUSDCents">
            <summary>
            Gets or sets the amount in USD cents for the source token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Estimated.ToAmountMinUSDCents">
            <summary>
            Gets or sets the minimum amount in USD cents for the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Estimated.ToAmountUSDCents">
            <summary>
            Gets or sets the amount in USD cents for the destination token.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Estimated.SlippageBPS">
            <summary>
            Gets or sets the slippage in basis points.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Estimated.FeesUSDCents">
            <summary>
            Gets or sets the fees in USD cents.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Estimated.GasCostUSDCents">
            <summary>
            Gets or sets the gas cost in USD cents.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.Estimated.DurationSeconds">
            <summary>
            Gets or sets the duration of the transaction in seconds.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.OnRampCurrency">
            <summary>
            Represents the currency details for an on-ramp transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampCurrency.Amount">
            <summary>
            Gets or sets the amount of the currency.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampCurrency.AmountUnits">
            <summary>
            Gets or sets the units of the currency amount.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampCurrency.Decimals">
            <summary>
            Gets or sets the number of decimals for the currency.
            </summary>
        </member>
        <member name="P:Thirdweb.Pay.OnRampCurrency.CurrencySymbol">
            <summary>
            Gets or sets the symbol of the currency.
            </summary>
        </member>
        <member name="T:Thirdweb.Pay.SwapType">
            <summary>
            Represents the different types of swaps.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapType.SAME_CHAIN">
            <summary>
            Swap on the same chain.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapType.CROSS_CHAIN">
            <summary>
            Swap across different chains.
            </summary>
        </member>
        <member name="F:Thirdweb.Pay.SwapType.ON_RAMP">
            <summary>
            On-ramp swap.
            </summary>
        </member>
        <member name="T:Thirdweb.RpcError">
            <summary>
            Represents an error returned from an RPC call.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcError.Code">
            <summary>
            Gets or sets the error code.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcError.Message">
            <summary>
            Gets or sets the error message.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcError.Data">
            <summary>
            Gets or sets additional data about the error.
            </summary>
        </member>
        <member name="T:Thirdweb.RpcRequest">
            <summary>
            Represents an RPC request.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcRequest.Jsonrpc">
            <summary>
            Gets or sets the JSON-RPC version.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcRequest.Method">
            <summary>
            Gets or sets the method name for the RPC request.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcRequest.Params">
            <summary>
            Gets or sets the parameters for the RPC request.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcRequest.Id">
            <summary>
            Gets or sets the ID of the RPC request.
            </summary>
        </member>
        <member name="T:Thirdweb.RpcResponse`1">
            <summary>
            Represents a response from an RPC call.
            </summary>
            <typeparam name="T">The type of the result.</typeparam>
        </member>
        <member name="P:Thirdweb.RpcResponse`1.Jsonrpc">
            <summary>
            Gets or sets the JSON-RPC version.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcResponse`1.Id">
            <summary>
            Gets or sets the ID of the RPC request.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcResponse`1.Result">
            <summary>
            Gets or sets the result of the RPC call.
            </summary>
        </member>
        <member name="P:Thirdweb.RpcResponse`1.Error">
            <summary>
            Gets or sets the error details if the RPC call fails.
            </summary>
        </member>
        <member name="T:Thirdweb.ThirdwebRPC">
            <summary>
            Represents the Thirdweb RPC client for sending requests and handling responses.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebRPC.GetRpcInstance(Thirdweb.ThirdwebClient,System.Numerics.BigInteger)">
            <summary>
            Gets an instance of the ThirdwebRPC client for the specified ThirdwebClient and chain ID.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="chainId">The chain ID.</param>
            <returns>An instance of the ThirdwebRPC client.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the client is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the chain ID is invalid.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebRPC.SendRequestAsync``1(System.String,System.Object[])">
            <summary>
            Sends an RPC request asynchronously and returns the response.
            </summary>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <param name="method">The RPC method name.</param>
            <param name="parameters">The parameters for the RPC request.</param>
            <returns>The RPC response.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the response cannot be deserialized.</exception>
        </member>
        <member name="T:Thirdweb.ThirdwebRPCTimer">
            <summary>
            Represents a timer for RPC batching.
            </summary>
        </member>
        <member name="E:Thirdweb.ThirdwebRPCTimer.Elapsed">
            <summary>
            Occurs when the timer interval has elapsed.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebRPCTimer.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.ThirdwebRPCTimer"/> class with the specified interval.
            </summary>
            <param name="interval">The interval at which the timer elapses.</param>
        </member>
        <member name="M:Thirdweb.ThirdwebRPCTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebRPCTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebRPCTimer.Dispose">
            <summary>
            Disposes the timer, stopping its execution.
            </summary>
        </member>
        <member name="T:Thirdweb.IPFSUploadResult">
            <summary>
            Represents the result of an IPFS upload.
            </summary>
        </member>
        <member name="F:Thirdweb.IPFSUploadResult.IpfsHash">
            <summary>
            Gets or sets the IPFS hash of the uploaded content.
            </summary>
        </member>
        <member name="F:Thirdweb.IPFSUploadResult.PinSize">
            <summary>
            Gets or sets the size of the pinned content.
            </summary>
        </member>
        <member name="F:Thirdweb.IPFSUploadResult.Timestamp">
            <summary>
            Gets or sets the timestamp of the upload.
            </summary>
        </member>
        <member name="F:Thirdweb.IPFSUploadResult.PreviewUrl">
            <summary>
            Gets or sets the preview URL of the uploaded content.
            </summary>
        </member>
        <member name="T:Thirdweb.ThirdwebStorage">
            <summary>
            Provides methods for downloading and uploading data to Thirdweb storage.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebStorage.Download``1(Thirdweb.ThirdwebClient,System.String,System.Nullable{System.Int32})">
            <summary>
            Downloads data from the specified URI.
            </summary>
            <typeparam name="T">The type of data to download.</typeparam>
            <param name="client">The Thirdweb client.</param>
            <param name="uri">The URI to download from.</param>
            <param name="requestTimeout">The optional request timeout in milliseconds.</param>
            <returns>The downloaded data.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the URI is null or empty.</exception>
            <exception cref="T:System.Exception">Thrown if the download fails.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebStorage.UploadRaw(Thirdweb.ThirdwebClient,System.Byte[])">
            <summary>
            Uploads raw byte data to Thirdweb storage.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="rawBytes">The raw byte data to upload.</param>
            <returns>The result of the upload.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the raw byte data is null or empty.</exception>
            <exception cref="T:System.Exception">Thrown if the upload fails.</exception>
        </member>
        <member name="M:Thirdweb.ThirdwebStorage.Upload(Thirdweb.ThirdwebClient,System.String)">
            <summary>
            Uploads a file to Thirdweb storage from the specified path.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="path">The path to the file.</param>
            <returns>The result of the upload.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the path is null or empty.</exception>
        </member>
        <member name="T:Thirdweb.TotalCosts">
            <summary>
            Represents the total costs in ether and wei.
            </summary>
        </member>
        <member name="F:Thirdweb.TotalCosts.ether">
            <summary>
            The cost in ether.
            </summary>
        </member>
        <member name="F:Thirdweb.TotalCosts.wei">
            <summary>
            The cost in wei.
            </summary>
        </member>
        <member name="T:Thirdweb.ThirdwebTransaction">
            <summary>
            Represents a Thirdweb transaction.
            </summary>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.Create(Thirdweb.IThirdwebWallet,Thirdweb.ThirdwebTransactionInput,System.Numerics.BigInteger)">
            <summary>
            Creates a new Thirdweb transaction.
            </summary>
            <param name="wallet">The wallet to use for the transaction.</param>
            <param name="txInput">The transaction input.</param>
            <param name="chainId">The chain ID.</param>
            <returns>A new Thirdweb transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.ToString">
            <summary>
            Converts the transaction input to a JSON string.
            </summary>
            <returns>A JSON string representation of the transaction input.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetTo(System.String)">
            <summary>
            Sets the recipient address of the transaction.
            </summary>
            <param name="to">The recipient address.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetData(System.String)">
            <summary>
            Sets the data for the transaction.
            </summary>
            <param name="data">The data.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetValue(System.Numerics.BigInteger)">
            <summary>
            Sets the value to be transferred in the transaction.
            </summary>
            <param name="weiValue">The value in wei.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetGasLimit(System.Numerics.BigInteger)">
            <summary>
            Sets the gas limit for the transaction.
            </summary>
            <param name="gas">The gas limit.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetGasPrice(System.Numerics.BigInteger)">
            <summary>
            Sets the gas price for the transaction.
            </summary>
            <param name="gasPrice">The gas price.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetNonce(System.Numerics.BigInteger)">
            <summary>
            Sets the nonce for the transaction.
            </summary>
            <param name="nonce">The nonce.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetMaxFeePerGas(System.Numerics.BigInteger)">
            <summary>
            Sets the maximum fee per gas for the transaction.
            </summary>
            <param name="maxFeePerGas">The maximum fee per gas.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetMaxPriorityFeePerGas(System.Numerics.BigInteger)">
            <summary>
            Sets the maximum priority fee per gas for the transaction.
            </summary>
            <param name="maxPriorityFeePerGas">The maximum priority fee per gas.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetChainId(System.Numerics.BigInteger)">
            <summary>
            Sets the chain ID for the transaction.
            </summary>
            <param name="chainId">The chain ID.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SetZkSyncOptions(Thirdweb.ZkSyncOptions)">
            <summary>
            Sets the zkSync options for the transaction.
            </summary>
            <param name="zkSyncOptions">The zkSync options.</param>
            <returns>The updated transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.EstimateGasCosts(Thirdweb.ThirdwebTransaction)">
            <summary>
            Estimates the gas costs for the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The estimated gas costs.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.EstimateTotalCosts(Thirdweb.ThirdwebTransaction)">
            <summary>
            Estimates the total costs for the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The estimated total costs.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.EstimateGasPrice(Thirdweb.ThirdwebTransaction,System.Boolean)">
            <summary>
            Estimates the gas price for the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="withBump">Whether to include a bump in the gas price.</param>
            <returns>The estimated gas price.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.EstimateGasFees(Thirdweb.ThirdwebTransaction,System.Boolean)">
            <summary>
            Estimates the gas fees for the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="withBump">Whether to include a bump in the gas fees.</param>
            <returns>The estimated maximum fee per gas and maximum priority fee per gas.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.Simulate(Thirdweb.ThirdwebTransaction)">
            <summary>
            Simulates the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The result of the simulation.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.EstimateGasLimit(Thirdweb.ThirdwebTransaction)">
            <summary>
            Estimates the gas limit for the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The estimated gas limit.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.GetNonce(Thirdweb.ThirdwebTransaction)">
            <summary>
            Gets the nonce for the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The nonce.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.Sign(Thirdweb.ThirdwebTransaction)">
            <summary>
            Signs the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The signed transaction.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.Send(Thirdweb.ThirdwebTransaction)">
            <summary>
            Sends the transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The transaction hash.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.SendAndWaitForTransactionReceipt(Thirdweb.ThirdwebTransaction)">
            <summary>
            Sends the transaction and waits for the transaction receipt.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The transaction receipt.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.WaitForTransactionReceipt(Thirdweb.ThirdwebClient,System.Numerics.BigInteger,System.String,System.Threading.CancellationToken)">
            <summary>
            Waits for the transaction receipt.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="chainId">The chain ID.</param>
            <param name="txHash">The transaction hash.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The transaction receipt.</returns>
        </member>
        <member name="M:Thirdweb.ThirdwebTransaction.ConvertToZkSyncTransaction(Thirdweb.ThirdwebTransaction)">
            <summary>
            Converts the transaction to a zkSync transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>The zkSync transaction.</returns>
        </member>
        <member name="T:Thirdweb.ThirdwebTransactionInput">
            <summary>
            Represents the input parameters for a Thirdweb transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.Nonce">
            <summary>
            Gets or sets the nonce of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.From">
            <summary>
            Gets or sets the sender address of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.To">
            <summary>
            Gets or sets the recipient address of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.Gas">
            <summary>
            Gets or sets the gas limit for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.GasPrice">
            <summary>
            Gets or sets the gas price for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.Value">
            <summary>
            Gets or sets the value to be transferred in the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.Data">
            <summary>
            Gets or sets the data to be sent with the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.MaxFeePerGas">
            <summary>
            Gets or sets the maximum fee per gas for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.MaxPriorityFeePerGas">
            <summary>
            Gets or sets the maximum priority fee per gas for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.ChainId">
            <summary>
            Gets or sets the chain ID for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionInput.ZkSync">
            <summary>
            Gets or sets the zkSync options for the transaction.
            </summary>
        </member>
        <member name="T:Thirdweb.ZkSyncOptions">
            <summary>
            Represents the zkSync options for a transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ZkSyncOptions.GasPerPubdataByteLimit">
            <summary>
            Gets or sets the gas limit per pubdata byte.
            </summary>
        </member>
        <member name="P:Thirdweb.ZkSyncOptions.FactoryDeps">
            <summary>
            Gets or sets the factory dependencies.
            </summary>
        </member>
        <member name="P:Thirdweb.ZkSyncOptions.Paymaster">
            <summary>
            Gets or sets the paymaster.
            </summary>
        </member>
        <member name="P:Thirdweb.ZkSyncOptions.PaymasterInput">
            <summary>
            Gets or sets the paymaster input data.
            </summary>
        </member>
        <member name="M:Thirdweb.ZkSyncOptions.#ctor(System.String,System.String,System.Nullable{System.Numerics.BigInteger},System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.ZkSyncOptions"/> struct.
            </summary>
            <param name="paymaster">The paymaster.</param>
            <param name="paymasterInput">The paymaster input data.</param>
            <param name="gasPerPubdataByteLimit">The gas limit per pubdata byte.</param>
            <param name="factoryDeps">The factory dependencies.</param>
        </member>
        <member name="T:Thirdweb.ThirdwebTransactionReceipt">
            <summary>
            Represents the receipt of a transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.TransactionHash">
            <summary>
            Gets or sets the transaction hash.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.TransactionIndex">
            <summary>
            Gets or sets the transaction index within the block.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.BlockHash">
            <summary>
            Gets or sets the hash of the block containing the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.BlockNumber">
            <summary>
            Gets or sets the number of the block containing the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.From">
            <summary>
            Gets or sets the address of the sender.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.To">
            <summary>
            Gets or sets the address of the recipient.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.CumulativeGasUsed">
            <summary>
            Gets or sets the cumulative gas used by the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.GasUsed">
            <summary>
            Gets or sets the gas used by the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.EffectiveGasPrice">
            <summary>
            Gets or sets the effective gas price for the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.ContractAddress">
            <summary>
            Gets or sets the contract address created by the transaction, if applicable.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.Status">
            <summary>
            Gets or sets the status of the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.Logs">
            <summary>
            Gets or sets the logs generated by the transaction.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.Type">
            <summary>
            Gets or sets the transaction type.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.LogsBloom">
            <summary>
            Gets or sets the logs bloom filter.
            </summary>
        </member>
        <member name="P:Thirdweb.ThirdwebTransactionReceipt.Root">
            <summary>
            Gets or sets the root of the transaction.
            </summary>
        </member>
        <member name="T:Thirdweb.Utils">
            <summary>
            Provides utility methods for various operations.
            </summary>
        </member>
        <member name="M:Thirdweb.Utils.ComputeClientIdFromSecretKey(System.String)">
            <summary>
            Computes the client ID from the given secret key.
            </summary>
            <param name="secretKey">The secret key.</param>
            <returns>The computed client ID.</returns>
        </member>
        <member name="M:Thirdweb.Utils.HexConcat(System.String[])">
            <summary>
            Concatenates the given hex strings.
            </summary>
            <param name="hexStrings">The hex strings to concatenate.</param>
            <returns>The concatenated hex string.</returns>
        </member>
        <member name="M:Thirdweb.Utils.HashPrefixedMessage(System.Byte[])">
            <summary>
            Hashes the given message bytes with a prefixed message.
            </summary>
            <param name="messageBytes">The message bytes to hash.</param>
            <returns>The hashed message bytes.</returns>
        </member>
        <member name="M:Thirdweb.Utils.HashPrefixedMessage(System.String)">
            <summary>
            Hashes the given message with a prefixed message.
            </summary>
            <param name="message">The message to hash.</param>
            <returns>The hashed message.</returns>
        </member>
        <member name="M:Thirdweb.Utils.HashMessage(System.Byte[])">
            <summary>
            Hashes the given message bytes.
            </summary>
            <param name="messageBytes">The message bytes to hash.</param>
            <returns>The hashed message bytes.</returns>
        </member>
        <member name="M:Thirdweb.Utils.HashMessage(System.String)">
            <summary>
            Hashes the given message.
            </summary>
            <param name="message">The message to hash.</param>
            <returns>The hashed message.</returns>
        </member>
        <member name="M:Thirdweb.Utils.BytesToHex(System.Byte[])">
            <summary>
            Converts the given bytes to a hex string.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The hex string.</returns>
        </member>
        <member name="M:Thirdweb.Utils.HexToBytes(System.String)">
            <summary>
            Converts the given hex string to bytes.
            </summary>
            <param name="hex">The hex string to convert.</param>
            <returns>The bytes.</returns>
        </member>
        <member name="M:Thirdweb.Utils.StringToHex(System.String)">
            <summary>
            Converts the given string to a hex string.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>The hex string.</returns>
        </member>
        <member name="M:Thirdweb.Utils.HexToString(System.String)">
            <summary>
            Converts the given hex string to a regular string.
            </summary>
            <param name="hex">The hex string to convert.</param>
            <returns>The regular string.</returns>
        </member>
        <member name="M:Thirdweb.Utils.GetUnixTimeStampNow">
            <summary>
            Gets the current Unix timestamp.
            </summary>
            <returns>The current Unix timestamp.</returns>
        </member>
        <member name="M:Thirdweb.Utils.GetUnixTimeStampIn10Years">
            <summary>
            Gets the Unix timestamp for 10 years from now.
            </summary>
            <returns>The Unix timestamp for 10 years from now.</returns>
        </member>
        <member name="M:Thirdweb.Utils.ReplaceIPFS(System.String,System.String)">
            <summary>
            Replaces the IPFS URI with a specified gateway.
            </summary>
            <param name="uri">The URI to replace.</param>
            <param name="gateway">The gateway to use.</param>
            <returns>The replaced URI.</returns>
        </member>
        <member name="M:Thirdweb.Utils.ToWei(System.String)">
            <summary>
            Converts the given ether value to wei.
            </summary>
            <param name="eth">The ether value to convert.</param>
            <returns>The wei value.</returns>
        </member>
        <member name="M:Thirdweb.Utils.ToEth(System.String,System.Int32,System.Boolean)">
            <summary>
            Converts the given wei value to ether.
            </summary>
            <param name="wei">The wei value to convert.</param>
            <param name="decimalsToDisplay">The number of decimals to display.</param>
            <param name="addCommas">Whether to add commas to the output.</param>
            <returns>The ether value.</returns>
        </member>
        <member name="M:Thirdweb.Utils.FormatERC20(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Formats the given ERC20 token value.
            </summary>
            <param name="wei">The wei value to format.</param>
            <param name="decimalsToDisplay">The number of decimals to display.</param>
            <param name="decimals">The number of decimals of the token.</param>
            <param name="addCommas">Whether to add commas to the output.</param>
            <returns>The formatted token value.</returns>
        </member>
        <member name="M:Thirdweb.Utils.GenerateSIWE(Thirdweb.LoginPayloadData)">
            <summary>
            Generates a Sign-In With Ethereum (SIWE) message.
            </summary>
            <param name="loginPayloadData">The login payload data.</param>
            <returns>The generated SIWE message.</returns>
        </member>
        <member name="M:Thirdweb.Utils.IsZkSync(System.Numerics.BigInteger)">
            <summary>
            Checks if the chain ID corresponds to zkSync.
            </summary>
            <param name="chainId">The chain ID.</param>
            <returns>True if it is a zkSync chain ID, otherwise false.</returns>
        </member>
        <member name="M:Thirdweb.Utils.ToChecksumAddress(System.String)">
            <summary>
            Converts an Ethereum address to its checksum format.
            </summary>
            <param name="address">The Ethereum address.</param>
            <returns>The checksummed Ethereum address.</returns>
        </member>
        <member name="M:Thirdweb.Utils.DecodeAllEvents``1(Thirdweb.ThirdwebTransactionReceipt)">
            <summary>
            Decodes all events of the specified type from the transaction receipt logs.
            </summary>
            <typeparam name="TEventDTO">The event DTO type.</typeparam>
            <param name="transactionReceipt">The transaction receipt.</param>
            <returns>A list of decoded events.</returns>
        </member>
        <member name="M:Thirdweb.Utils.AdjustDecimals(System.Numerics.BigInteger,System.Int32,System.Int32)">
            <summary>
            Adjusts the value's decimals.
            </summary>
            <param name="value">The value.</param>
            <param name="fromDecimals">The original number of decimals.</param>
            <param name="toDecimals">The target number of decimals.</param>
            <returns>The value adjusted to the new decimals.</returns>
        </member>
        <member name="T:Thirdweb.EIP712">
            <summary>
            Provides methods for generating and signing EIP712 compliant messages and transactions.
            </summary>
        </member>
        <member name="M:Thirdweb.EIP712.GenerateSignature_SmartAccount(System.String,System.String,System.Numerics.BigInteger,System.String,Thirdweb.AccountAbstraction.SignerPermissionRequest,Thirdweb.IThirdwebWallet)">
            <summary>
            Generates a signature for a smart account permission request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <param name="signerPermissionRequest">The signer permission request.</param>
            <param name="signer">The wallet signer.</param>
            <returns>The generated signature.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GenerateSignature_SmartAccount_AccountMessage(System.String,System.String,System.Numerics.BigInteger,System.String,System.Byte[],Thirdweb.IThirdwebWallet)">
            <summary>
            Generates a signature for a smart account message.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <param name="message">The message to sign.</param>
            <param name="signer">The wallet signer.</param>
            <returns>The generated signature.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GenerateSignature_ZkSyncTransaction(System.String,System.String,System.Numerics.BigInteger,Thirdweb.AccountAbstraction.ZkSyncAATransaction,Thirdweb.IThirdwebWallet)">
            <summary>
            Generates a signature for a zkSync transaction.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="transaction">The zkSync transaction.</param>
            <param name="signer">The wallet signer.</param>
            <returns>The generated signature.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GenerateSignature_MinimalForwarder(System.String,System.String,System.Numerics.BigInteger,System.String,Thirdweb.Forwarder_ForwardRequest,Thirdweb.IThirdwebWallet)">
            <summary>
            Generates a signature for a minimal forwarder request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <param name="forwardRequest">The forward request.</param>
            <param name="signer">The wallet signer.</param>
            <returns>The generated signature.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GenerateSignature_TokenERC20(System.String,System.String,System.Numerics.BigInteger,System.String,Thirdweb.TokenERC20_MintRequest,Thirdweb.IThirdwebWallet)">
            <summary>
            Generates a signature for an ERC20 token mint request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <param name="mintRequest">The mint request.</param>
            <param name="signer">The wallet signer.</param>
            <returns>The generated signature.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GenerateSignature_TokenERC721(System.String,System.String,System.Numerics.BigInteger,System.String,Thirdweb.TokenERC721_MintRequest,Thirdweb.IThirdwebWallet)">
            <summary>
            Generates a signature for an ERC721 token mint request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <param name="mintRequest">The mint request.</param>
            <param name="signer">The wallet signer.</param>
            <returns>The generated signature.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GenerateSignature_TokenERC1155(System.String,System.String,System.Numerics.BigInteger,System.String,Thirdweb.TokenERC1155_MintRequest,Thirdweb.IThirdwebWallet)">
            <summary>
            Generates a signature for an ERC1155 token mint request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <param name="mintRequest">The mint request.</param>
            <param name="signer">The wallet signer.</param>
            <returns>The generated signature.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GetTypedDefinition_SmartAccount(System.String,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Gets the typed data definition for a smart account permission request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <returns>The typed data definition.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GetTypedDefinition_SmartAccount_AccountMessage(System.String,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Gets the typed data definition for a smart account message.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <returns>The typed data definition.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GetTypedDefinition_ZkSyncTransaction(System.String,System.String,System.Numerics.BigInteger)">
            <summary>
            Gets the typed data definition for a zkSync transaction.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <returns>The typed data definition.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GetTypedDefinition_TokenERC20(System.String,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Gets the typed data definition for a TokenERC20 mint request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <returns>The typed data definition.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GetTypedDefinition_TokenERC721(System.String,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Gets the typed data definition for a TokenERC721 mint request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <returns>The typed data definition.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GetTypedDefinition_TokenERC1155(System.String,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Gets the typed data definition for a TokenERC1155 mint request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <returns>The typed data definition.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.GetTypedDefinition_MinimalForwarder(System.String,System.String,System.Numerics.BigInteger,System.String)">
            <summary>
            Gets the typed data definition for a minimal forwarder request.
            </summary>
            <param name="domainName">The domain name.</param>
            <param name="version">The version.</param>
            <param name="chainId">The chain ID.</param>
            <param name="verifyingContract">The verifying contract.</param>
            <returns>The typed data definition.</returns>
        </member>
        <member name="M:Thirdweb.EIP712.SerializeEip712(Thirdweb.AccountAbstraction.ZkSyncAATransaction,Nethereum.Signer.EthECDSASignature,System.Numerics.BigInteger)">
            <summary>
            Serializes an EIP712 zkSync transaction.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="signature">The ECDSA signature.</param>
            <param name="chainId">The chain ID.</param>
            <returns>The serialized transaction.</returns>
        </member>
        <member name="M:Thirdweb.EWS.IvGenerator.ComputeIvAsync(System.Byte[])">
            <summary>
            Compute IV using half LFSR-generated and half random bytes.
            </summary>
            <remarks>https://crypto.stackexchange.com/questions/84357/what-are-the-rules-for-using-aes-gcm-correctly</remarks>
            <param name="iv">The IV byte array to fill.  This must be twelve bytes in size.</param>
        </member>
        <member name="M:Thirdweb.EWS.IvGenerator.ComputeNextPrbsValue(System.Int64)">
            <summary>
            Compute the next value of a PRBS using a 48-bit Galois LFSR.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Linear-feedback_shift_register</remarks>
            <param name="prbsValue">The current PRBS value.</param>
            <returns>The next value.</returns>
        </member>
        <member name="M:Thirdweb.EWS.Secrets.Combine(System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Reconsitute a secret from <paramref name="shares"/>.
            </summary>
            <remarks>
            <para>The return value will <c>not</c> be the original secret if the number of shares provided is less than the threshold
            number of shares.</para>
            <para>Duplicate shares do not count toward the threshold.</para>
            </remarks>
            <param name="shares">The shares used to reconstitute the secret.</param>
            <returns>The reconstituted secret.</returns>
        </member>
        <member name="M:Thirdweb.EWS.Secrets.GetBytes(System.String)">
            <summary>
            Convert a string of hexadecimal digits into a byte array.
            </summary>
            <param name="s">The string of hexadecimal digits to convert.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Thirdweb.EWS.Secrets.GetHexString(System.Byte[])">
            <summary>
            Convert a byte array into a string of hexadecimal digits.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A string of hexadecimal digits.</returns>
        </member>
        <member name="M:Thirdweb.EWS.Secrets.NewShare(System.Int32,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Generate a new share identified as <paramref name="shareId"/>.
            </summary>
            <remarks>
            <para>The return value will be invalid if the number of shares provided is less than the threshold number of shares.</para>
            <para>If <paramref name="shareId"/> is the identifier of a share in <paramref name="shares"/> and the number of shares
            provided is at least the threshold number of shares, the return value will be the same as the identified share.</para>
            <para>Duplicate shares do not count toward the threshold.</para>
            </remarks>
            <param name="shareId">The identifier of the share to generate.</param>
            <param name="shares">The shares from which to generate the new share.</param>
            <returns>A hexadecimal string of the new share.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Thirdweb.EWS.Secrets.Random(System.Int32)">
            <summary>
            Generate a random value expressed as a string of hexadecimal digits that contains <paramref name="nBytes"/> bytes using a
            secure random number generator.
            </summary>
            <param name="nBytes">The number of bytes of output.</param>
            <returns>A hexadecimal string of the value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Thirdweb.EWS.Secrets.Share(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Divide a <paramref name="secret"/> into <paramref name="nShares"/>
            shares, requiring <paramref name="threshold"/> shares to
            reconstruct the secret.  Optionally, initialize with <paramref name="nBits"/>. Optionally, zero-pad the secret to a length
            that is a multiple of <paramref name="paddingMultiple"/> (default 128) before sharing.
            </summary>
            <param name="secret">A secret value expressed as a string of hexadecimal digits.</param>
            <param name="nShares">The number of shares to produce.</param>
            <param name="threshold">The number of shares required to reconstruct the secret.</param>
            <param name="nBits">The number of bits to use to create the shares.</param>
            <param name="paddingMultiple">The amount of zero-padding to apply to the secret before sharing.</param>
            <returns>A list of strings of hexadecimal digits.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Thirdweb.AuthProvider">
            <summary>
            Specifies the authentication providers available for the in-app wallet.
            </summary>
        </member>
        <member name="T:Thirdweb.InAppWallet">
            <summary>
            Represents an in-app wallet that extends the functionality of a private key wallet.
            </summary>
        </member>
        <member name="M:Thirdweb.InAppWallet.Create(Thirdweb.ThirdwebClient,System.String,System.String,Thirdweb.AuthProvider,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Thirdweb.InAppWallet"/> class.
            </summary>
            <param name="client">The Thirdweb client instance.</param>
            <param name="email">The email address for authentication.</param>
            <param name="phoneNumber">The phone number for authentication.</param>
            <param name="authprovider">The authentication provider to use.</param>
            <param name="storageDirectoryPath">The path to the storage directory.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the created in-app wallet.</returns>
            <exception cref="T:System.ArgumentException">Thrown when required parameters are not provided.</exception>
        </member>
        <member name="M:Thirdweb.InAppWallet.Disconnect">
            <summary>
            Disconnects the wallet.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Thirdweb.InAppWallet.LoginWithOauth(System.Boolean,System.Action{System.String},System.String,Thirdweb.IThirdwebBrowser,System.Threading.CancellationToken)">
            <summary>
            Logs in with OAuth2.
            </summary>
            <param name="isMobile">Indicates if the login is from a mobile device.</param>
            <param name="browserOpenAction">The action to open the browser.</param>
            <param name="mobileRedirectScheme">The mobile redirect scheme.</param>
            <param name="browser">The browser instance.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation. The task result contains the login result.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when required parameters are not provided.</exception>
            <exception cref="T:System.Threading.Tasks.TaskCanceledException">Thrown when the operation is canceled.</exception>
            <exception cref="T:System.TimeoutException">Thrown when the operation times out.</exception>
        </member>
        <member name="M:Thirdweb.InAppWallet.SendOTP">
            <summary>
            Sends an OTP to the user's email or phone number.
            </summary>
            <returns>A task representing the asynchronous operation.</returns>
            <exception cref="T:System.Exception">Thrown when email or phone number is not provided.</exception>
        </member>
        <member name="M:Thirdweb.InAppWallet.SubmitOTP(System.String)">
            <summary>
            Submits the OTP for verification.
            </summary>
            <param name="otp">The OTP to submit.</param>
            <returns>A task representing the asynchronous operation. The task result contains the address and a boolean indicating if retry is possible.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when OTP is not provided.</exception>
            <exception cref="T:System.Exception">Thrown when email or phone number is not provided.</exception>
        </member>
        <member name="M:Thirdweb.InAppWallet.GetEmail">
            <summary>
            Gets the email associated with the in-app wallet.
            </summary>
            <returns>A task representing the asynchronous operation. The task result contains the email address.</returns>
        </member>
        <member name="M:Thirdweb.InAppWallet.GetPhoneNumber">
            <summary>
            Gets the phone number associated with the in-app wallet.
            </summary>
            <returns>A task representing the asynchronous operation. The task result contains the phone number.</returns>
        </member>
        <member name="M:Thirdweb.InAppWallet.LoginWithJWT(System.String,System.String,System.String)">
            <summary>
            Logs in with a JWT.
            </summary>
            <param name="jwt">The JWT to use for authentication.</param>
            <param name="encryptionKey">The encryption key to use.</param>
            <param name="recoveryCode">The optional recovery code.</param>
            <returns>A task representing the asynchronous operation. The task result contains the login result.</returns>
            <exception cref="T:System.ArgumentException">Thrown when JWT or encryption key is not provided.</exception>
            <exception cref="T:System.Exception">Thrown when the login fails.</exception>
        </member>
        <member name="M:Thirdweb.InAppWallet.LoginWithAuthEndpoint(System.String,System.String,System.String)">
            <summary>
            Logs in with an authentication endpoint.
            </summary>
            <param name="payload">The payload to use for authentication.</param>
            <param name="encryptionKey">The encryption key to use.</param>
            <param name="recoveryCode">The optional recovery code.</param>
            <returns>A task representing the asynchronous operation. The task result contains the login result.</returns>
            <exception cref="T:System.ArgumentException">Thrown when payload or encryption key is not provided.</exception>
            <exception cref="T:System.Exception">Thrown when the login fails.</exception>
        </member>
        <member name="T:Thirdweb.InAppWalletBrowser">
            <summary>
            Represents an in-app browser for handling wallet login.
            </summary>
        </member>
        <member name="M:Thirdweb.InAppWalletBrowser.Login(Thirdweb.ThirdwebClient,System.String,System.String,System.Action{System.String},System.Threading.CancellationToken)">
            <summary>
            Initiates a login process using the in-app browser.
            </summary>
            <param name="client">The Thirdweb client instance.</param>
            <param name="loginUrl">The URL to initiate the login process.</param>
            <param name="redirectUrl">The URL to redirect to after login.</param>
            <param name="browserOpenAction">An action to open the browser with the login URL.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation. The task result contains the login result.</returns>
        </member>
        <member name="M:Thirdweb.InAppWalletBrowser.StopHttpListener">
            <summary>
            Stops the HTTP listener.
            </summary>
        </member>
        <member name="M:Thirdweb.InAppWalletBrowser.IncomingHttpRequest(System.IAsyncResult)">
            <summary>
            Handles incoming HTTP requests.
            </summary>
            <param name="result">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Thirdweb.InAppWalletBrowser.AddForwardSlashIfNecessary(System.String)">
            <summary>
            Adds a forward slash to the URL if necessary.
            </summary>
            <param name="url">The URL to check.</param>
            <returns>The URL with a forward slash added if necessary.</returns>
        </member>
        <member name="T:Thirdweb.IThirdwebBrowser">
            <summary>
            Defines an interface for handling browser-based login for Thirdweb.
            </summary>
        </member>
        <member name="M:Thirdweb.IThirdwebBrowser.Login(Thirdweb.ThirdwebClient,System.String,System.String,System.Action{System.String},System.Threading.CancellationToken)">
            <summary>
            Initiates a login process using the browser.
            </summary>
            <param name="client">The Thirdweb client instance.</param>
            <param name="loginUrl">The URL to initiate the login process.</param>
            <param name="redirectUrl">The URL to redirect to after login.</param>
            <param name="browserOpenAction">An action to open the browser with the login URL.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation. The task result contains the login result.</returns>
        </member>
        <member name="T:Thirdweb.BrowserStatus">
            <summary>
            Enumerates the possible statuses of a browser operation.
            </summary>
        </member>
        <member name="F:Thirdweb.BrowserStatus.Success">
            <summary>
            The operation was successful.
            </summary>
        </member>
        <member name="F:Thirdweb.BrowserStatus.UserCanceled">
            <summary>
            The user canceled the operation.
            </summary>
        </member>
        <member name="F:Thirdweb.BrowserStatus.Timeout">
            <summary>
            The operation timed out.
            </summary>
        </member>
        <member name="F:Thirdweb.BrowserStatus.UnknownError">
            <summary>
            An unknown error occurred during the operation.
            </summary>
        </member>
        <member name="T:Thirdweb.BrowserResult">
            <summary>
            Represents the result of a browser-based login operation.
            </summary>
        </member>
        <member name="P:Thirdweb.BrowserResult.status">
            <summary>
            Gets the status of the browser operation.
            </summary>
        </member>
        <member name="P:Thirdweb.BrowserResult.callbackUrl">
            <summary>
            Gets the callback URL returned from the browser operation.
            </summary>
        </member>
        <member name="P:Thirdweb.BrowserResult.error">
            <summary>
            Gets the error message, if any, from the browser operation.
            </summary>
        </member>
        <member name="M:Thirdweb.BrowserResult.#ctor(Thirdweb.BrowserStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.BrowserResult"/> class with the specified status and callback URL.
            </summary>
            <param name="status">The status of the browser operation.</param>
            <param name="callbackUrl">The callback URL returned from the browser operation.</param>
        </member>
        <member name="M:Thirdweb.BrowserResult.#ctor(Thirdweb.BrowserStatus,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.BrowserResult"/> class with the specified status, callback URL, and error message.
            </summary>
            <param name="status">The status of the browser operation.</param>
            <param name="callbackUrl">The callback URL returned from the browser operation.</param>
            <param name="error">The error message from the browser operation.</param>
        </member>
        <member name="T:Thirdweb.IThirdwebWallet">
            <summary>
            Interface for a Thirdweb wallet.
            </summary>
        </member>
        <member name="P:Thirdweb.IThirdwebWallet.Client">
            <summary>
            Gets the Thirdweb client associated with the wallet.
            </summary>
        </member>
        <member name="P:Thirdweb.IThirdwebWallet.AccountType">
            <summary>
            Gets the account type of the wallet.
            </summary>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.GetAddress">
            <summary>
            Gets the address of the wallet.
            </summary>
            <returns>The wallet address.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.EthSign(System.Byte[])">
            <summary>
            Signs a raw message using Ethereum's signing method.
            </summary>
            <param name="rawMessage">The raw message to sign.</param>
            <returns>The signed message.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.EthSign(System.String)">
            <summary>
            Signs a message using Ethereum's signing method.
            </summary>
            <param name="message">The message to sign.</param>
            <returns>The signed message.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.PersonalSign(System.Byte[])">
            <summary>
            Signs a raw message using personal signing.
            </summary>
            <param name="rawMessage">The raw message to sign.</param>
            <returns>The signed message.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.PersonalSign(System.String)">
            <summary>
            Signs a message using personal signing.
            </summary>
            <param name="message">The message to sign.</param>
            <returns>The signed message.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.SignTypedDataV4(System.String)">
            <summary>
            Signs typed data (version 4).
            </summary>
            <param name="json">The JSON representation of the typed data.</param>
            <returns>The signed data.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.SignTypedDataV4``2(``0,Nethereum.ABI.EIP712.TypedData{``1})">
            <summary>
            Signs typed data (version 4).
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <typeparam name="TDomain">The type of the domain.</typeparam>
            <param name="data">The data to sign.</param>
            <param name="typedData">The typed data.</param>
            <returns>The signed data.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.IsConnected">
            <summary>
            Checks if the wallet is connected.
            </summary>
            <returns>True if connected, otherwise false.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.SignTransaction(Thirdweb.ThirdwebTransactionInput)">
            <summary>
            Signs a transaction.
            </summary>
            <param name="transaction">The transaction to sign.</param>
            <returns>The signed transaction.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.SendTransaction(Thirdweb.ThirdwebTransactionInput)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="transaction">The transaction to send.</param>
            <returns>The transaction hash.</returns>
        </member>
        <member name="M:Thirdweb.IThirdwebWallet.Authenticate(System.String,System.Numerics.BigInteger,System.String,System.String,Thirdweb.IThirdwebHttpClient)">
            <summary>
            Authenticates the wallet.
            </summary>
            <param name="domain">The authentication domain.</param>
            <param name="chainId">The chain ID.</param>
            <param name="authPayloadPath">The authentication payload path.</param>
            <param name="authLoginPath">The authentication login path.</param>
            <param name="httpClientOverride">The HTTP client override.</param>
            <returns>The authentication result.</returns>
        </member>
        <member name="T:Thirdweb.ThirdwebAccountType">
            <summary>
            Enum for the types of Thirdweb accounts.
            </summary>
        </member>
        <member name="T:Thirdweb.LoginPayload">
            <summary>
            Represents a login payload.
            </summary>
        </member>
        <member name="T:Thirdweb.LoginPayloadData">
            <summary>
            Represents login payload data.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Type">
            <summary>
            Gets or sets the type of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Domain">
            <summary>
            Gets or sets the domain of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Address">
            <summary>
            Gets or sets the address of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Statement">
            <summary>
            Gets or sets the statement of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Uri">
            <summary>
            Gets or sets the URI of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Version">
            <summary>
            Gets or sets the version of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.ChainId">
            <summary>
            Gets or sets the chain ID of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Nonce">
            <summary>
            Gets or sets the nonce of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.IssuedAt">
            <summary>
            Gets or sets the issued at timestamp of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.ExpirationTime">
            <summary>
            Gets or sets the expiration time of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.InvalidBefore">
            <summary>
            Gets or sets the invalid before timestamp of the login payload.
            </summary>
        </member>
        <member name="P:Thirdweb.LoginPayloadData.Resources">
            <summary>
            Gets or sets the resources of the login payload.
            </summary>
        </member>
        <member name="M:Thirdweb.LoginPayloadData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.LoginPayloadData"/> class.
            </summary>
        </member>
        <member name="T:Thirdweb.PrivateKeyWallet">
            <summary>
            Represents a wallet that uses a private key for signing transactions and messages.
            </summary>
        </member>
        <member name="P:Thirdweb.PrivateKeyWallet.Client">
            <summary>
            Gets the Thirdweb client associated with the wallet.
            </summary>
        </member>
        <member name="P:Thirdweb.PrivateKeyWallet.AccountType">
            <summary>
            Gets the account type of the wallet.
            </summary>
        </member>
        <member name="F:Thirdweb.PrivateKeyWallet._ecKey">
            <summary>
            The Ethereum EC key used by the wallet.
            </summary>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.#ctor(Thirdweb.ThirdwebClient,Nethereum.Signer.EthECKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Thirdweb.PrivateKeyWallet"/> class.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="key">The Ethereum EC key.</param>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.Create(Thirdweb.ThirdwebClient,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Thirdweb.PrivateKeyWallet"/> using the specified private key.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <param name="privateKeyHex">The private key in hexadecimal format.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the created <see cref="T:Thirdweb.PrivateKeyWallet"/>.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.Generate(Thirdweb.ThirdwebClient)">
            <summary>
            Generates a new instance of <see cref="T:Thirdweb.PrivateKeyWallet"/> with a random private key.
            </summary>
            <param name="client">The Thirdweb client.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the created <see cref="T:Thirdweb.PrivateKeyWallet"/>.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.GetAddress">
            <summary>
            Gets the address of the wallet.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the address of the wallet.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.EthSign(System.Byte[])">
            <summary>
            Signs a message using the wallet's private key.
            </summary>
            <param name="rawMessage">The message to sign.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the signed message.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.EthSign(System.String)">
            <summary>
            Signs a message using the wallet's private key.
            </summary>
            <param name="message">The message to sign.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the signed message.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.PersonalSign(System.Byte[])">
            <summary>
            Signs a message using the wallet's private key with personal sign.
            </summary>
            <param name="rawMessage">The message to sign.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the signed message.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.PersonalSign(System.String)">
            <summary>
            Signs a message using the wallet's private key with personal sign.
            </summary>
            <param name="message">The message to sign.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the signed message.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.SignTypedDataV4(System.String)">
            <summary>
            Signs typed data (EIP-712) using the wallet's private key.
            </summary>
            <param name="json">The JSON string representing the typed data.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the signed data.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.SignTypedDataV4``2(``0,Nethereum.ABI.EIP712.TypedData{``1})">
            <summary>
            Signs typed data (EIP-712) using the wallet's private key.
            </summary>
            <typeparam name="T">The type of the data to sign.</typeparam>
            <typeparam name="TDomain">The type of the domain.</typeparam>
            <param name="data">The data to sign.</param>
            <param name="typedData">The typed data.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the signed data.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.SignTransaction(Thirdweb.ThirdwebTransactionInput)">
            <summary>
            Signs a transaction using the wallet's private key.
            </summary>
            <param name="transaction">The transaction to sign.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the signed transaction.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.IsConnected">
            <summary>
            Checks if the wallet is connected.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result indicates whether the wallet is connected.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.Disconnect">
            <summary>
            Disconnects the wallet.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.Authenticate(System.String,System.Numerics.BigInteger,System.String,System.String,Thirdweb.IThirdwebHttpClient)">
            <summary>
            Authenticates the user by signing a message with the wallet's private key.
            </summary>
            <param name="domain">The domain for authentication.</param>
            <param name="chainId">The chain ID.</param>
            <param name="authPayloadPath">The authentication payload path.</param>
            <param name="authLoginPath">The authentication login path.</param>
            <param name="httpClientOverride">Optional HTTP client override.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the authentication response.</returns>
        </member>
        <member name="M:Thirdweb.PrivateKeyWallet.SendTransaction(Thirdweb.ThirdwebTransactionInput)">
            <summary>
            Throws an exception because sending transactions is not supported for private key wallets.
            </summary>
            <param name="transaction">The transaction to send.</param>
            <returns>Throws an InvalidOperationException.</returns>
        </member>
    </members>
</doc>
